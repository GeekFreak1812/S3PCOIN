1. Block_Simulation.py - Basic Blockchain Block Structure and Chaining

This script demonstrates the foundational elements of a blockchain by defining a S3PCOINBlock class and showing how individual blocks are created and linked together to form a chain.
Core Concepts Illustrated:
Block Structure: Each block encapsulates essential information including its index, timestamp, a list of transactions, the previous_block_hash, and a nonce.
Cryptographic Hashing: The calculate_hash method uses SHA-256 to generate a unique digital fingerprint for each block. This hash is derived from all the block's contents, ensuring data integrity.
Immutability and Chaining: Blocks are linked by including the hash of the previous block (previous_block_hash) in the current block's hash calculation. Any alteration to a past block would change its hash, invalidating all subsequent blocks in the chain, thus enforcing immutability.
Step-by-Step Explanation:
Import Libraries:
hashlib: Used for cryptographic hashing (SHA-256).
datetime: Used to generate timestamps for when blocks are created.
S3PCOINBlock Class Definition:
__init__(self, index, previous_block_hash, transaction_list, nonce=0):
Initializes a new block instance with the provided index (its position in the chain), the previous_block_hash (linking it to the prior block), a transaction_list (the data stored in the block), and an initial nonce (a number used in mining, defaulted to 0).
self.timestamp is set to the current date and time upon creation.
self.data is created by joining the transaction_list into a single string for hashing.
self.block_hash is immediately calculated using self.calculate_hash().
calculate_hash(self):
Concatenates all relevant block attributes (index, timestamp, data, previous_block_hash, nonce) into a single string.
Encodes this string to bytes and then applies the SHA-256 hashing algorithm.
Returns the hexadecimal representation of the hash.
Example Usage (Outside the class):
Transactions: A few sample transaction strings (t1 to t6) are defined to represent the data that would be included in blocks.
Initial Block (Genesis Block):
initial_block = S3PCOINBlock(0, "0", [t1, t2]) creates the very first block with index 0 and a "0" as its previous hash (as there's no block before it).
Its details (index, timestamp, data, previous_block_hash, hash, nonce) are printed to the console.
Second Block:
second_block = S3PCOINBlock(1, initial_block.block_hash, [t3, t4]) creates the second block. Crucially, its previous_block_hash is set to the block_hash of the initial_block, demonstrating the chaining mechanism.
Its details are also printed.
Third Block:
third_block = S3PCOINBlock(2, second_block.block_hash, [t5, t6]) creates the third block, similarly linking it to the second_block's hash.
Its details are printed.
